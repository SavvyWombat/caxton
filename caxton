#!/usr/bin/env php
<?php

require_once 'vendor/autoload.php';

use Illuminate\Contracts\Foundation\Application;
use Illuminate\Events\Dispatcher;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\Facade;
use Illuminate\Support\Facades\View;
use Illuminate\View\Compilers\BladeCompiler;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use Illuminate\View\Factory;
use Illuminate\View\FileViewFinder;
use SavvyWombat\Caxton\App;
use SavvyWombat\Caxton\ContentFileFilter;

$index = array_search(['-e', '--env'], $argv);

$_ENV['ENVIRONMENT'] = $argv[$index + 2] ?? 'dev';
$_ENV['WORKING_DIR'] = getcwd();

// prefer specific environment if available
$env = Dotenv\Dotenv::createImmutable(realpath($_ENV['WORKING_DIR']), '.env.' . $_ENV['ENVIRONMENT']);
$env->safeLoad();

// fill in any gaps from local .env
$dotenv = Dotenv\Dotenv::createImmutable(realpath($_ENV['WORKING_DIR']));
$dotenv->load();

$_ENV['BASE_URL'] = $_ENV['BASE_URL'] ?? "http://localhost";
$_ENV['CONTENT_PATH'] = $_ENV['WORKING_DIR'] . ($_ENV['CONTENT_DIR'] ?? '/content');
$_ENV['CACHE_PATH'] = $_ENV['WORKING_DIR'] . '/build' . ($_ENV['CACHE_DIR'] ?? '/cache');
$_ENV['OUTPUT_PATH'] = $_ENV['WORKING_DIR'] . '/build' . ($_ENV['OUTPUT_DIR'] ?? '/dev');

// 0.   clean old build
if (! file_exists($_ENV['WORKING_DIR'] . '/build')) {
    mkdir($_ENV['WORKING_DIR'] . '/build', 0775);
}

// 1.   copy stuff from public to content

// 2.   build assets (styles and scripts)

// 3.   build content

// 3.1. scan content folder for structure
$contentFiles = new RecursiveIteratorIterator(
    new ContentFileFilter(
        new RecursiveDirectoryIterator(
            $_ENV['CONTENT_PATH'],
            FilesystemIterator::SKIP_DOTS
        )
    ),
    RecursiveIteratorIterator::SELF_FIRST
);

// 3.2. extract front matter - tags?

// 3.3. render content to output
$container = App::getInstance();

// we have to bind our app class to the interface
// as the blade compiler needs the `getNamespace()` method to guess Blade component FQCNs
$container->instance(Application::class, $container);

// Dependencies
$filesystem = new Filesystem;
$eventDispatcher = new Dispatcher($container);

// Create View Factory capable of rendering PHP and Blade templates
$viewResolver = new EngineResolver;
$bladeCompiler = new BladeCompiler($filesystem, $_ENV['CACHE_PATH']);

$viewResolver->register('blade', function () use ($bladeCompiler) {
    return new CompilerEngine($bladeCompiler);
});

$viewFinder = new FileViewFinder($filesystem, [$_ENV['CONTENT_PATH']]);
$viewFactory = new Factory($viewResolver, $viewFinder, $eventDispatcher);
$viewFactory->setContainer($container);
Facade::setFacadeApplication($container);
$container->instance(\Illuminate\Contracts\View\Factory::class, $viewFactory);
$container->alias(
    \Illuminate\Contracts\View\Factory::class,
    (new class extends View {
        public static function getFacadeAccessor()
        {
            return parent::getFacadeAccessor();
        }
    })::getFacadeAccessor()
);
$container->instance(BladeCompiler::class, $bladeCompiler);
$container->alias(
    BladeCompiler::class,
    (new class extends Blade {
        public static function getFacadeAccessor()
        {
            return parent::getFacadeAccessor();
        }
    })::getFacadeAccessor()
);

foreach ($contentFiles as $contentFile) {
    $subpath = str_replace(
        $_ENV['CONTENT_PATH'],
        '',
        $contentFile->getRealPath()
    );

    if (!file_exists($_ENV['OUTPUT_PATH'] . dirname($subpath))) {
        // directories need the 'execute/search' bit
        // permissions are subject to the umask value in the running environment
        mkdir($_ENV['OUTPUT_PATH'] . dirname($subpath), 0775, true);
    }

    if (str_ends_with($subpath, '.blade.php')) {
        $subpath = str_replace('.blade.php', '', $subpath);
        $output = $viewFactory->make(
            str_replace('/', '.', $subpath),
            [
                'page' => null,
                'url' => $_ENV['BASE_URL'] . (str_ends_with($subpath, 'index') ? substr($subpath, 0, -5) : $subpath),
            ]
        )->render();

        echo $_ENV['BASE_URL'] . (str_ends_with($subpath, 'index') ? substr($subpath, 0, -5) : $subpath) . "\n";
        file_put_contents($_ENV['OUTPUT_PATH'] . $subpath . '.html', $output);
    }
}
