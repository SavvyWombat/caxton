#!/usr/bin/env php
<?php

require_once 'vendor/autoload.php';

use SavvyWombat\Caxton\Config;
use SavvyWombat\Caxton\ConfigFile;
use SavvyWombat\Caxton\Middleware;
use SavvyWombat\Caxton\Site;

$config = [];
$config['verbose'] = in_array('-v', $argv) || in_array('--verbose', $argv);

$index = array_search('-e', $argv) ?: array_search('--env', $argv);
$config['environment'] = $argv[$index + 1] ?? 'dev';
$config['paths']['base'] = getcwd();

// prefer specific environment if available
$env = Dotenv\Dotenv::createImmutable(realpath($config['paths']['base']), '.env.' . $config['environment']);
$env->safeLoad();

// fill in any gaps from local .env
$dotenv = Dotenv\Dotenv::createImmutable(realpath($config['paths']['base']));
$dotenv->load();

$config['base_url'] = $_ENV['BASE_URL'] ?? "http://localhost";
$config['paths']['content'] = $config['paths']['base'] . ($_ENV['CONTENT_DIR'] ?? '/content');
$config['paths']['public'] = $config['paths']['base'] . ($_ENV['PUBLIC_DIR'] ?? '/public');
$config['paths']['cache'] = $config['paths']['base'] . '/build' . ($_ENV['CACHE_DIR'] ?? '/cache');
$config['paths']['output'] = $config['paths']['base'] . '/build' . ($_ENV['OUTPUT_DIR'] ?? '/' . $config['environment']);

$config['blade']['extensions'] = '.blade.(md|php)';

$config = Config::instance(
    $config,
    ConfigFile::read($config['paths']['base'] . '/caxton.json', []),
    ConfigFile::read($config['paths']['base'] . '/caxton.' . $config['environment'] . '.json', []),
);

// 0.   clean old build
if (! file_exists($config::instance()->get('paths.base') . '/build')) {
    mkdir($config::instance()->get('paths.base') . '/build', 0775);
}

if (file_exists(Config::instance()->get('paths.output'))) {
    $oldFiles = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator(
            Config::instance()->get('paths.output'),
            RecursiveDirectoryIterator::SKIP_DOTS
        ),
        RecursiveIteratorIterator::CHILD_FIRST
    );

    foreach ($oldFiles as $oldFile) {
        $oldFile->isLink() || $oldFile->isFile()
            ? unlink($oldFile)
            : rmdir($oldFile);
    }
}

$middlewares = [
    Middleware\ScanFiles::class,
    Middleware\CopyStaticFiles::class,
    Middleware\BuildContentFiles::class,
];

$action = fn (Site $site): Site => $site;
foreach (array_reverse($middlewares) as $m) {
    $middleware = new $m();
    $action = fn (Site $site): Site => $middleware->run($site, $action);
}
$action(Site::instance());
